/*------------------------------------------------------------------------
  external libraries - Final
  -------------------------------------------------------------------------*/
#include <NewPing.h>

#include <Wire.h>
#include <ZumoShield.h>

#define STRING_TERMINATOR "."           // used as the last char to be sent over serial connection
#define TRIGGER_PIN  2  // Arduino pin tied to trigger pin on the ultrasonic sensor.
#define ECHO_PIN     6  // Arduino pin tied to echo pin on the ultrasonic sensor.
#define MAX_DISTANCE 30 // Maximum distance we want to ping for (in centimeters). Maximum sensor distance is rated at 400-500cm.

ZumoBuzzer buzzer;
NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE); // NewPing setup of pins and maximum distance.
ZumoReflectanceSensorArray reflectanceSensors;
//ZumoReflectanceSensorArray sensors(QTR_NO_EMITTER_PIN);
ZumoMotors motors;
Pushbutton button(ZUMO_BUTTON);

const int MAX_SPEED = 150;
int lastError = 0;
int lastError2 = 0;
int currentRoom = 5;
int targetRoom = 0;
int calibratedValue[6];                 // the calibrated QTR_THRESHOLD of the black line
int incomingByte;                       // a variable to read incoming serial data into
bool isAutoModeOn = false;              // ensures that the robot does not start instantly aftar calibration
bool moveToRoom = false;                // ensures that the robot does not start instantly aftar calibration
bool TurnAround = false;                // ensures that the robot does not start instantly aftar calibration
bool switchLane = false;
char currentLane = 'O';                 // current lane of the zumo, "O" for outer lane, "I" for inner lane

void setup() {
  // initialize serial communication:
  Serial.begin(9600);

  Serial.print("Start");                      // Singal the UI that it's ready to start
  Serial.print(STRING_TERMINATOR);
    // Play a little welcome song
  buzzer.play(">g32>>c32");

  // Initialize the reflectance sensors module
  reflectanceSensors.init();

  // Wait for the user button to be pressed and released
  button.waitForButton();

  // Turn on LED to indicate we are in calibration mode
  pinMode(13, OUTPUT);
  digitalWrite(13, HIGH);

  // Wait 1 second and then begin automatic sensor calibration
  // by rotating in place to sweep the sensors over the line
  delay(1000);
  int i;
  for(i = 0; i < 80; i++)
  {
    if ((i > 10 && i <= 30) || (i > 50 && i <= 70))
      motors.setSpeeds(-200, 200);
    else
      motors.setSpeeds(200, -200);
    reflectanceSensors.calibrate();

    // Since our counter runs to 80, the total delay will be
    // 80*20 = 1600 ms.
    delay(20);
  }
  motors.setSpeeds(0,0);

  // Turn off LED to indicate we are through with calibration
  digitalWrite(13, LOW);
  buzzer.play(">g32>>c32");
//  pinMode(ledPin, OUTPUT);
}

void loop() {
  checkInput();
}

void checkInput() {
  // see if there's incoming serial data:
  if (Serial.available() > 0) {
    incomingByte = Serial.read();
    if (incomingByte == '0') {
      targetRoom = 0;
      Serial.print("0");
      Serial.print(STRING_TERMINATOR);
      calculateRoute();
    }
    if (incomingByte == '1') {
      targetRoom = 1;
      Serial.print("1");
      Serial.print(STRING_TERMINATOR);
      calculateRoute();
    }
    if (incomingByte == '2') {
      targetRoom = 2;
      Serial.print("2");
      Serial.print(STRING_TERMINATOR);
      calculateRoute();
    }
    if (incomingByte == '3') {
      targetRoom = 3;
      Serial.print("3");
      Serial.print(STRING_TERMINATOR);
      calculateRoute();
    }
    if (incomingByte == '4') {
      targetRoom = 4;
      Serial.print("4");
      Serial.print(STRING_TERMINATOR);
      calculateRoute();
    }
    if (incomingByte == '5') {
      targetRoom = 5;
      Serial.print("5");
      Serial.print(STRING_TERMINATOR);
      calculateRoute();
    }
  }
}

void spinAround(){
  bool stopTurn = false;
  motors.setSpeeds(200, -200);
  delay(200);
  
  motors.setSpeeds(200, -200);

  while (!stopTurn){
    unsigned int sensors[6];

    reflectanceSensors.read(sensors);

    if (sensors[2] >= 400 && sensors[3] >= 400)
    {
      // if rightmost sensor detects line, reverse and turn to the left
      motors.setSpeeds(0, 0);
      stopTurn = true;
    }
  }
}

void calculateRoute(){
  if (currentRoom < targetRoom && !TurnAround){
    motors.setSpeeds(-200, -200);
    delay(200);
    spinAround();
    TurnAround = true;
  }
  if (currentRoom > targetRoom && TurnAround){
    motors.setSpeeds(-200, -200);
    delay(200);
    spinAround();
    TurnAround = false;
  }
  // Add turn around
  moveToRoom = true;
  while (moveToRoom){ 
    if (currentRoom == targetRoom)
        moveToRoom = false;
  
    if (currentRoom > targetRoom){
      motors.setSpeeds(100, 100);
      delay(200);
      --currentRoom;
      automatedMovement();
    }

    if (currentRoom < targetRoom){
      motors.setSpeeds(100, 100);
      delay(200);
      ++currentRoom;
      automatedMovement();
    }
  }
  if (currentRoom != 5){
    buzzer.play(">g32>>c32");
    delay(3000);
    Serial.print("Journey Complete");
  }
}

void changeToOuterLane() {
  unsigned int sensors[6];
  currentLane = 'O'; 
  motors.setSpeeds(200, 200);
  delay(100);  
  bool keepTurning = true;
//  motors.setSpeeds(200, 200);
//  delay(100);
  motors.setSpeeds(0, 0);
  if (!TurnAround) {
    motors.setSpeeds(150, -150);
    delay(200);
    motors.setSpeeds(0, 0);
    motors.setSpeeds(150, -150);
  }
  else {
    motors.setSpeeds(-150, 150);
    delay(200);
    motors.setSpeeds(0, 0);
    motors.setSpeeds(-150, 150);
  }
  while (keepTurning){
    reflectanceSensors.read(sensors);
    if (sensors[2] >= 400 && sensors[3] >= 400) {
      // if rightmost sensor detects line, reverse and turn to the left
      motors.setSpeeds(0, 0);
      keepTurning = false;
    }
  }

  basicLineFollow();

  motors.setSpeeds(150, 150);
  delay(200);
  
  if (!TurnAround) {
    motors.setSpeeds(-150, 150);
    delay(200);
    motors.setSpeeds(0, 0);
    motors.setSpeeds(-150, 150);
  }
  else {
    motors.setSpeeds(150, -150);
    delay(200);
    motors.setSpeeds(0, 0);
    motors.setSpeeds(150, -150);
  }
  keepTurning = true;
  while (keepTurning){
    reflectanceSensors.read(sensors);
    if (sensors[2] >= 400) {
      // if rightmost sensor detects line, reverse and turn to the left
      motors.setSpeeds(0, 0);
      keepTurning = false;
    }
  }
  motors.setSpeeds(-150, -150);
  bool keepReversing = true;
  while (keepReversing){
    reflectanceSensors.read(sensors);
    if (sensors[0] >= 400 || sensors[5] >= 400) {
      // if rightmost sensor detects line, reverse and turn to the left
      motors.setSpeeds(0, 0);
      keepReversing = false;
    }
  }
}

void automatedMovement() {
  isAutoModeOn = true;
  bool returnToRoom = false;
  int switchLaneCounter = 0;
  while(isAutoModeOn){
    unsigned int sensors[6];
    int position = reflectanceSensors.readLine(sensors);
  
    int error = position - 2500;
  
    int speedDifference = error / 4 + 6 * (error - lastError);
  
    lastError = error;
    
    // Get individual motor speeds.  The sign of speedDifference
    // determines if the robot turns left or right.
    int m1Speed = MAX_SPEED + speedDifference;
    int m2Speed = MAX_SPEED - speedDifference;
  
    if (m1Speed < 0)
      m1Speed = 0;
    if (m2Speed < 0)
      m2Speed = 0;
    if (m1Speed > MAX_SPEED)
      m1Speed = MAX_SPEED;
    if (m2Speed > MAX_SPEED)
      m2Speed = MAX_SPEED;
  
    motors.setSpeeds(m1Speed, m2Speed);

    reflectanceSensors.read(sensors);

    if (sensors[5] >= 400 && sensors[0] >= 400){
      if (!returnToRoom && !switchLane) {
        isAutoModeOn = false;
        motors.setSpeeds(0, 0);
        if (currentLane == 'I'){
          changeToOuterLane();
        }
      }
      if (returnToRoom) {
//          changeToInnerLane();
          returnToRoom = false;
          switchLane = true;
      }
      if (switchLane){
        ++switchLaneCounter;
        bool keepTurning = true;
        motors.setSpeeds(200, 200);
        delay(100);
        motors.setSpeeds(0, 0);
        if (!TurnAround){
          motors.setSpeeds(150, -150);
          delay(200);
          motors.setSpeeds(0, 0);
          motors.setSpeeds(150, -150);
        }
        else{
          motors.setSpeeds(-150, 150);
          delay(200);
          motors.setSpeeds(0, 0);
          motors.setSpeeds(-150, 150);
        }
        while (keepTurning){
          reflectanceSensors.read(sensors);
          if (sensors[2] >= 400 && sensors[3] >= 400)
            {
              // if rightmost sensor detects line, reverse and turn to the left
              motors.setSpeeds(0, 0);
              keepTurning = false;
            }
        }
        if (switchLaneCounter == 2){
          switchLaneCounter = 0;
          switchLane = false;
        }
      }
    }
//      motors.setSpeeds(0, 0);
    float scanForward = sonar.ping_cm();

    if(scanForward > 2 && scanForward < 8){
      if (!returnToRoom) {
        motors.setSpeeds(0, 0);
        currentLane = 'I';       
        Serial.print("Object Detected");
        Serial.print(STRING_TERMINATOR);
        spinAround();
        returnToRoom = true;
      }
      else {
        bool wait = true;
        while (wait){
            motors.setSpeeds(0, 0);
            delay(100);
            float scanForward2 = sonar.ping_cm();
            if(scanForward2 > 2 && scanForward2 < 8){
              buzzer.play(">g32>>c32");
              delay(300);
            }
            else
            {
              wait = false;
            }
        }
      }
    }
  }
}

void basicLineFollow()
{
  isAutoModeOn = true;
  bool returnToRoom = false;
  int switchLaneCounter = 0;
  while(isAutoModeOn){
    unsigned int sensors[6];
  
    // Get the position of the line.  Note that we *must* provide the "sensors"
    // argument to readLine() here, even though we are not interested in the
    // individual sensor readings
    int position = reflectanceSensors.readLine(sensors);
  
    // Our "error" is how far we are away from the center of the line, which
    // corresponds to position 2500.
    int error = position - 2500;
  
    // Get motor speed difference using proportional and derivative PID terms
    // (the integral term is generally not very useful for line following).
    // Here we are using a proportional constant of 1/4 and a derivative
    // constant of 6, which should work decently for many Zumo motor choices.
    // You probably want to use trial and error to tune these constants for
    // your particular Zumo and line course.
    int speedDifference = error / 4 + 6 * (error - lastError);
  
    lastError = error;
  
    // Get individual motor speeds.  The sign of speedDifference
    // determines if the robot turns left or right.
    int m1Speed = MAX_SPEED + speedDifference;
    int m2Speed = MAX_SPEED - speedDifference;
  
    // Here we constrain our motor speeds to be between 0 and MAX_SPEED.
    // Generally speaking, one motor will always be turning at MAX_SPEED
    // and the other will be at MAX_SPEED-|speedDifference| if that is positive,
    // else it will be stationary.  For some applications, you might want to
    // allow the motor speed to go negative so that it can spin in reverse.
    if (m1Speed < 0)
      m1Speed = 0;
    if (m2Speed < 0)
      m2Speed = 0;
    if (m1Speed > MAX_SPEED)
      m1Speed = MAX_SPEED;
    if (m2Speed > MAX_SPEED)
      m2Speed = MAX_SPEED;
  
    motors.setSpeeds(m1Speed, m2Speed);

    reflectanceSensors.read(sensors);

    if (sensors[5] >= 400 && sensors[0] >= 400){
      motors.setSpeeds(0, 0);
      isAutoModeOn = false;
    }
  }
}
